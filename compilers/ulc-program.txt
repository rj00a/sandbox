# Misc. functions
id = \x. x;
flip = \f. \x. \y. f y x;

# The normal-order Y combinator
rec = \f. (\x. f (x x)) (\x. f (x x));

# Boolean logic
true = \t. \f. t;
false = \t. \f. f;
and = \l. \r. l r false;
or = \l. \r. l true r;
not = \b. b false true;

# Scott encoded natural numbers
0 = \z. \s. z;
succ = \n. \z. \s. s n;
1 = succ 0;
2 = succ 1;
3 = succ 2;
4 = succ 3;
5 = succ 4;
6 = succ 5;
7 = succ 6;
8 = succ 7;
9 = succ 8;
# ...

# Scott encoded lists
nil = \n. \c. n;
cons = \a. \l. \n. \c. c a l;
singleton = \a. cons a nil;

# Arithmetic on natural numbers.
+ = rec \+. \l. \r. l r \p. + p (succ r);
- = rec \-. \l. \r. l 0 \pl. r l (\pr. - pl pr);
* = rec \*. \l. \r. l 0 \pl. + r (* pl r);
^ = rec \^. \l. \r. r 1 \pr. * l (^ l pr);

# Comparison ops
is-zero = \n. n true \_. false;
<eq = \l. \r. is-zero (- l r);
>eq = flip <eq;
> = \l. \r. not (<eq l r);
< = flip >;

# Floor division
/ = rec \/. \l. \r. (>eq l r) (+ 1 (/ (- l r) r)) 0;

# Check that two natural numbers are equal.
nateq = rec \nateq. \l. \r. l (r true (\_. false)) (\pl. r false (\pr. nateq pl pr));

factorial = rec \fac. \n. n 1 \_. * n (fac (- n 1));

120 = * (+ 9 3) (succ 9);

# Is the factorial of 5 equal to 120?
nateq (factorial 5) 120
